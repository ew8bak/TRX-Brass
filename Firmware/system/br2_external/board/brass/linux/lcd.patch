diff -Naur linux-custom.orig/drivers/video/fbdev/Kconfig linux-custom/drivers/video/fbdev/Kconfig
--- linux-custom.orig/drivers/video/fbdev/Kconfig	2023-04-21 10:47:58.000000000 +0300
+++ linux-custom/drivers/video/fbdev/Kconfig	2024-04-10 21:08:13.507393164 +0300
@@ -1999,6 +1999,13 @@
 	  framebuffer. ML300 carries a 640*480 LCD display on the board,
 	  ML403 uses a standard DB15 VGA connector.
 
+config FB_VDMA
+	tristate "Xilinx VDMA frame buffer support"
+	depends on FB && (MICROBLAZE || ARCH_ZYNQ || ARCH_ZYNQMP)
+	select FB_CFB_FILLRECT
+	select FB_CFB_COPYAREA
+	select FB_CFB_IMAGEBLIT
+
 config FB_GOLDFISH
 	tristate "Goldfish Framebuffer"
 	depends on FB
diff -Naur linux-custom.orig/drivers/video/fbdev/Makefile linux-custom/drivers/video/fbdev/Makefile
--- linux-custom.orig/drivers/video/fbdev/Makefile	2023-04-21 10:47:58.000000000 +0300
+++ linux-custom/drivers/video/fbdev/Makefile	2024-04-10 21:08:13.507393164 +0300
@@ -109,6 +109,7 @@
 obj-$(CONFIG_FB_UDL)		  += udlfb.o
 obj-$(CONFIG_FB_SMSCUFX)	  += smscufx.o
 obj-$(CONFIG_FB_XILINX)           += xilinxfb.o
+obj-$(CONFIG_FB_VDMA)             += vdmafb.o
 obj-$(CONFIG_FB_SH_MOBILE_LCDC)	  += sh_mobile_lcdcfb.o
 obj-y				  += omap/
 obj-y                             += omap2/
diff -Naur linux-custom.orig/drivers/video/fbdev/vdmafb.c linux-custom/drivers/video/fbdev/vdmafb.c
--- linux-custom.orig/drivers/video/fbdev/vdmafb.c	1970-01-01 03:00:00.000000000 +0300
+++ linux-custom/drivers/video/fbdev/vdmafb.c	2024-04-15 20:25:07.410153799 +0300
@@ -0,0 +1,509 @@
+/**
+ * @file vdmafb.c
+ * @author Belousov Oleg <belousov.oleg@gmail.com>
+ *
+ * Based on:
+ *
+ * @author Kenta IDA <fuga@fugafuga.org>
+ * @description
+ * Frame-buffer driver for PYNQ-Z1 HDMI video output subsystem in the base overlay.
+ * This driver is based on simplefb.c, written by Stephen Warren.
+ * See also simplefb.c in the parent directory of the directory this file is placed.
+ */
+
+/*
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms and conditions of the GNU General Public License,
+ * version 2, as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ */
+ 
+#include <linux/device.h>
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/errno.h>
+#include <linux/string.h>
+#include <linux/mm.h>
+#include <linux/fb.h>
+#include <linux/init.h>
+#include <linux/dma-mapping.h>
+#include <linux/of_device.h>
+#include <linux/of_platform.h>
+#include <linux/of_address.h>
+#include <linux/io.h>
+#include <linux/slab.h>
+#include <linux/delay.h>
+
+/* VDMA */
+
+#define VDMA_REG_TX                 0x00000000
+#define VDMA_REG_RX                 0x00000030
+#define VDMA_REG_PARKPTR            0x00000028
+#define VDMA_REG_VERSION            0x0000002C
+
+#define VDMA_REG_CR                 0x00000000
+#define VDMA_REG_SR                 0x00000004
+#define VDMA_REG_MM2S_ADDR          0x00000050
+
+#define VDMA_REG_VSIZE              0x00000000 
+#define VDMA_REG_HSIZE              0x00000004 
+#define VDMA_REG_STRD_FRMDLY        0x00000008 
+#define VDMA_REG_START_ADDR         0x0000000C 
+#define VDMA_START_ADDR_LEN         0x00000004 
+#define VDMA_REG_START_ADDR_MSB     0x00000010
+
+#define VDMA_CR_RUNSTOP_MASK        0x00000001 
+#define VDMA_CR_TAIL_EN_MASK        0x00000002 
+#define VDMA_CR_RESET_MASK          0x00000004 
+
+#define VDMA_PARKPTR_READREF_MASK   0x0000001F
+#define VDMA_PARKPTR_WRTREF_MASK    0x00001F00
+#define VDMA_PARKPTR_READSTR_MASK   0x001F0000
+#define VDMA_PARKPTR_WRTSTR_MASK    0x1F000000
+
+#define VDMA_FRMDLY_SHIFT           24
+
+/* Driver */
+
+#define BIT_DISPLAY_RED             16
+#define BIT_DISPLAY_GREEN           8
+#define BIT_DISPLAY_BLUE            0
+
+#define RED_SHIFT                   16
+#define GREEN_SHIFT                 8
+#define BLUE_SHIFT                  0
+
+#define BIT_DISPLAY_START           0
+#define BIT_CLOCK_RUNNING           0
+
+#define DISPLAY_NOT_HDMI            0
+#define DISPLAY_HDMI                1
+
+#define BYTES_PER_PIXEL             3
+#define BITS_PER_PIXEL              (BYTES_PER_PIXEL * 8)
+
+#define NUMBER_OF_MEM_RESOURCES     1
+
+#define FB_NUMBER_OF_FRAMES         1
+#define PALETTE_ENTRIES_NO          16
+
+#define VDMA_FB_FLAGS_REGISTERED    (1u << 0)
+
+static struct fb_fix_screeninfo vdma_fb_fix = {
+    .id =       "VDMA FB",
+    .type =     FB_TYPE_PACKED_PIXELS,
+    .visual =   FB_VISUAL_TRUECOLOR,
+    .accel =    FB_ACCEL_NONE
+};
+
+static struct fb_var_screeninfo vdma_fb_var = {
+    .bits_per_pixel = BITS_PER_PIXEL,
+
+    .red =      { RED_SHIFT, 8, 0 },
+    .green =    { GREEN_SHIFT, 8, 0 },
+    .blue =     { BLUE_SHIFT, 8, 0 },
+    .transp =   { 0, 0, 0 },
+
+    .activate =	FB_ACTIVATE_NOW,
+    .vmode = FB_VMODE_NONINTERLACED,
+
+    .xres  = 1280,
+    .yres  = 1024,
+    .xres_virtual = 1280,
+    .yres_virtual = 1024,
+
+    .width  = (u32)(1280*2.54/72),
+    .height = (u32)(720*2.54/72),
+};
+
+struct vdma_frame {
+    u32     phys;
+    void*   virt;
+};
+
+struct vdma_fb_screen_param {
+    u32     width;
+    u32     height;
+    
+    u32     hFrameSize;
+    u32     hSyncStart;
+    u32     hSyncEnd;
+    
+    u32     vFrameSize;
+    u32     vSyncStart;
+    u32     vSyncEnd;
+};
+
+struct vdma_fb_screen_param vdma_fb_screen_params[] = {
+    /*w,    h,    hfsz, hss,  hse,  vfsz, vss,  vse */
+    { 640,  480,  800,  656,  752,  525,  489,  491 },
+    { 800,  480,  1056, 840,  968,  525,  489,  491 },
+    { 800,  600,  1056, 840,  968,  628,  600,  604 },
+    { 1280, 720,  1650, 1390, 1430, 750,  724,  729 },
+    { 1280, 1024, 1688, 1328, 1440, 1066, 1024, 1027 },
+    { 1920, 1080, 2200, 2008, 2052, 1125, 1083, 1088 },
+    { 0 },
+};
+
+struct vdma_fb_device {
+    struct fb_info      info;       /* fb_info struct to register framebuffer */
+
+    void __iomem*       reg_vdma;   /* virtual address to which VDMA register space is mapped. */
+    struct device*      dev;        /* device object */
+
+    struct vdma_frame frame[FB_NUMBER_OF_FRAMES];               /* Frame information. */
+    u32                 pseudo_palette[PALETTE_ENTRIES_NO];     /* Pseudo palette table.*/
+
+    u32                 width;      /* Number of horizontal pixels */
+    u32                 height;     /* Number of virtual pixels. */
+    u32                 stride;     /* Number of bytes in a horizontal line. */
+    u32                 flags;      /* Flags. refer to VDMA_FB_FLAGS_XXX constants. */
+
+    struct vdma_fb_screen_param*  screen_param;   /* Screen parameters */
+};
+
+
+/* register access functions */
+
+static u32 vdma_read_reg(struct vdma_fb_device* fbdev, u32 offset) { 
+    return ioread32(fbdev->reg_vdma + offset); 
+}
+
+static void vdma_write_reg(struct vdma_fb_device* fbdev, u32 offset, u32 value) { 
+    iowrite32(value, fbdev->reg_vdma + offset); 
+}
+
+static u32 vdma_tx_read_reg(struct vdma_fb_device* fbdev, u32 offset) {
+    return ioread32(fbdev->reg_vdma + offset + VDMA_REG_TX);
+}
+
+static void vdma_tx_write_reg(struct vdma_fb_device* fbdev, u32 offset, u32 value) {
+    iowrite32(value, fbdev->reg_vdma + offset + VDMA_REG_TX);
+}
+
+static u32 vdma_rx_read_reg(struct vdma_fb_device* fbdev, u32 offset) {
+    return ioread32(fbdev->reg_vdma + offset + VDMA_REG_RX);
+}
+
+static void vdma_rx_write_reg(struct vdma_fb_device* fbdev, u32 offset, u32 value) {
+    iowrite32(value, fbdev->reg_vdma + offset + VDMA_REG_RX);
+}
+
+/**
+ * Set the framebuffer hardware blank state.
+ */
+
+static int vdma_fb_blank(int blank_mode, struct fb_info *fbi) {
+    return 0;
+}
+
+/**
+ * Set pseudo color palette.
+ */
+
+static int vdma_fb_setcolreg(u_int regno, u_int red, u_int green, u_int blue, u_int transp, struct fb_info* info) {
+    u32 *palette = info->pseudo_palette;
+
+    if (regno >= PALETTE_ENTRIES_NO) {
+        return -EINVAL;
+    }
+
+    red >>= 8;
+    green >>= 8;
+    blue >>= 8;
+    palette[regno] = (red << RED_SHIFT) | (green << GREEN_SHIFT) | (blue << BLUE_SHIFT);
+
+    return 0;
+}
+
+/**
+ * Framebuffer operations.
+ */
+
+static struct fb_ops vdma_fb_ops = {
+    .owner          = THIS_MODULE,
+    .fb_blank       = vdma_fb_blank,      /* set blank state */
+    .fb_setcolreg   = vdma_fb_setcolreg,  /* set pseudo color palette */
+    .fb_fillrect    = cfb_fillrect,         /* fill rectangle area (use default function in the kernel) */
+    .fb_copyarea    = cfb_copyarea,         /* copy rectangle area (use default function in the kernel) */
+    .fb_imageblit   = cfb_imageblit,        /* image block transfer (use default function in the kernel) */
+};
+
+/**
+ * Parse device tree parameters.
+ */
+
+static int vdma_fb_parse_dt(struct platform_device* pdev, struct vdma_fb_device* fbdev) {
+    struct device_node* np = pdev->dev.of_node;
+    int ret;
+    struct vdma_fb_screen_param* screen_param = vdma_fb_screen_params;
+
+    ret = of_property_read_u32(np, "width", &fbdev->width);
+
+    if (ret) {
+        dev_err(&pdev->dev, "Can't parse width property\n");
+        return ret;
+    }
+    
+    ret = of_property_read_u32(np, "height", &fbdev->height);
+
+    if (ret) {
+        dev_err(&pdev->dev, "Can't parse height property\n");
+        return ret;
+    }
+
+    for (; screen_param->width != 0; ++screen_param) {
+        if (screen_param->width == fbdev->width && screen_param->height == fbdev->height) {
+            break;
+        }
+    }
+
+    if (screen_param->width == 0) {
+        screen_param = vdma_fb_screen_params;
+        dev_info(&pdev->dev, "Requested resolution %dx%d is not supported.\n", fbdev->width, fbdev->height);
+        fbdev->width  = screen_param->width;
+        fbdev->height = screen_param->height;
+        dev_info(&pdev->dev, "Fall back to %dx%d.\n", fbdev->width, fbdev->height);
+    } else {
+        dev_info(&pdev->dev, "Select resolution is %dx%d.\n", fbdev->width, fbdev->height);
+    }
+
+    fbdev->screen_param = screen_param;
+    return 0;
+}
+
+/* Calculate page aligned framebuffer size. */
+
+#define GET_FB_SIZE(fbdev) PAGE_ALIGN((fbdev)->width * (fbdev)->height * BYTES_PER_PIXEL)
+
+/* Release register resource. */
+
+#define RELEASE_REG_RESOURCE(fbdev, resource) \
+    do { if( (fbdev)->reg_##resource != NULL ) { devm_release_resource((fbdev)->dev, fbdev->reg_##resource ); fbdev->reg_##resource = NULL; } } while(0)
+
+/**
+ * Release framebuffer hardware resources.
+ */
+
+static void vdma_fb_release(struct vdma_fb_device* fbdev) {
+    int i;
+
+    if (fbdev == NULL) return;
+
+    /* Unregister framebuffer device */
+
+    if (fbdev->flags & VDMA_FB_FLAGS_REGISTERED) {
+        unregister_framebuffer(&fbdev->info);
+        fbdev->flags &= ~VDMA_FB_FLAGS_REGISTERED;
+    }
+
+    /* Stop modules */
+
+    if (fbdev->reg_vdma != NULL) {
+        /* Reset DMA channels */
+        vdma_rx_write_reg(fbdev, VDMA_REG_CR, VDMA_CR_RESET_MASK);
+        vdma_tx_write_reg(fbdev, VDMA_REG_CR, VDMA_CR_RESET_MASK);
+    }
+
+    /* Release memory mapped IO resources */
+
+    RELEASE_REG_RESOURCE(fbdev, vdma);
+    
+    /* Release framebuffer memories. */
+
+    for (i = 0; i < FB_NUMBER_OF_FRAMES; i++) {
+        if (fbdev->frame[i].virt != NULL) {
+            dma_free_coherent(fbdev->dev, GET_FB_SIZE(fbdev), fbdev->frame[i].virt, fbdev->frame[i].phys);
+            fbdev->frame[i].virt = NULL;
+        }
+    }
+}
+
+/* Release resources and exit from the function if the return code indicates an error. */
+
+#define RELEASE_AND_RETURN(rc) do { vdma_fb_release(fbdev); return (rc); } while(0)
+
+/**
+ * Probe and initialize the framebuffer hardware.
+ */
+
+static int vdma_fb_probe(struct platform_device *pdev) {
+    struct vdma_fb_device* fbdev;
+    u32 fbsize = 0;
+    int rc = 0;
+
+    dev_info(&pdev->dev, "Probing VDMA Framebuffer...\n");
+
+    /* Allocate memory to store device information */
+
+    fbdev = devm_kzalloc(&pdev->dev, sizeof(*fbdev), GFP_KERNEL);
+
+    if (!fbdev) {
+        return -ENOMEM;
+    }
+
+    memset(fbdev, 0, sizeof(*fbdev));
+    fbdev->dev = &pdev->dev;
+
+    /* Store driver-specific data */
+
+    platform_set_drvdata(pdev, fbdev);
+
+    /* parse parameters */
+
+    rc = vdma_fb_parse_dt(pdev, fbdev);
+
+    if (rc) {
+        return rc;
+    }
+
+    fbsize = GET_FB_SIZE(fbdev);
+
+    /* Map registers to memory space. */
+
+    for (int regIndex = 0; regIndex < NUMBER_OF_MEM_RESOURCES; regIndex++) {
+        void* __iomem reg;
+        struct resource* io = platform_get_resource(pdev, IORESOURCE_MEM, regIndex);
+
+        if (!io) {
+            dev_err(&pdev->dev, "No memory resource\n");
+            RELEASE_AND_RETURN(-ENODEV);
+        }
+            
+        reg = devm_ioremap_resource(fbdev->dev, io);
+        
+        if (IS_ERR(reg) ) {
+            dev_err(&pdev->dev, "Failed to map device memory\n");
+            RELEASE_AND_RETURN( PTR_ERR(reg) );
+        }
+
+        switch (regIndex) {
+            case 0: fbdev->reg_vdma   = reg; break;  /* Video DMA */
+        }
+    }
+    
+    /* Allocate framebuffer */
+    for (int i = 0; i < FB_NUMBER_OF_FRAMES; i++) {
+        void* virt;
+        virt = dma_alloc_coherent(fbdev->dev, fbsize, &fbdev->frame[i].phys, GFP_KERNEL);
+
+        if (!virt) {
+            dev_err(&pdev->dev, "Failed to allocate frame buffer\n");
+            return -ENOMEM;
+        }
+
+        memset_io((void __iomem *)virt, 0, fbsize);
+        fbdev->frame[i].virt = virt;
+    }
+    
+    /* Initialize other framebuffer parameters */
+
+    fbdev->stride = fbdev->width*BYTES_PER_PIXEL;                   /* Stride (bytes per line)  */
+
+    fbdev->info.device = fbdev->dev;                                
+    fbdev->info.pseudo_palette = fbdev->pseudo_palette;             /* Pseudo color palette which is used to render console characters. */
+    fbdev->info.screen_base = (void __iomem*)fbdev->frame[0].virt;  /* Virtual base address of frame buffer */
+    fbdev->info.fbops = &vdma_fb_ops;                             /* function pointers which implements FB operations. */
+    fbdev->info.fix = vdma_fb_fix;                                /* Fixed (Constant) framebuffer parameters. */
+    fbdev->info.fix.smem_start = fbdev->frame[0].phys;              /* Physical address of frame buffer. */
+    fbdev->info.fix.smem_len = fbsize;                              /* Length in bytes of the frame buffer. */
+    fbdev->info.fix.line_length = fbdev->stride;                    /* Bytes per line (stride) of frame buffer lines. */
+
+    fbdev->info.var = vdma_fb_var;                                /* Variable (changeable by request) parameters. */
+    fbdev->info.var.xres = fbdev->screen_param->width;              /* X resolution of the frame buffer. */
+    fbdev->info.var.yres = fbdev->screen_param->height;             /* Y resolution */
+    fbdev->info.var.xres_virtual = fbdev->info.var.xres;            /* Virtual X resolution */
+    fbdev->info.var.yres_virtual = fbdev->info.var.yres;            /* Virtual Y resolution */
+    fbdev->info.var.width  = (u32)(fbdev->info.var.xres*5/96/2);    /* Physical screen width in millimeters */
+    fbdev->info.var.height = (u32)(fbdev->info.var.yres*5/96/2);    /* Physical screen height in millimeters */
+
+    /* Initialize VDMA */
+
+    u32 cr = 0;
+
+    /* Reset the VDMA channels */
+
+    vdma_rx_write_reg(fbdev, VDMA_REG_CR, VDMA_CR_RESET_MASK);
+    vdma_tx_write_reg(fbdev, VDMA_REG_CR, VDMA_CR_RESET_MASK);
+
+    vdma_tx_write_reg(fbdev, VDMA_REG_CR, cr);
+
+    vdma_write_reg(fbdev, VDMA_REG_MM2S_ADDR+VDMA_REG_HSIZE, fbdev->width*BYTES_PER_PIXEL);
+    vdma_write_reg(fbdev, VDMA_REG_MM2S_ADDR+VDMA_REG_STRD_FRMDLY, fbdev->stride | (0 << VDMA_FRMDLY_SHIFT));    /* FrameDelay = 0; */
+
+    for (int i = 0; i < FB_NUMBER_OF_FRAMES; i++) {
+        u32 reg = VDMA_REG_MM2S_ADDR+VDMA_REG_START_ADDR+i*VDMA_START_ADDR_LEN;
+        vdma_write_reg(fbdev, reg, fbdev->frame[i].phys);
+    }
+
+    /* Start VDMA TX channel */
+
+    cr = vdma_tx_read_reg(fbdev, VDMA_REG_CR); /* Set RUN/STOP bit */
+    cr |= VDMA_CR_RUNSTOP_MASK;
+    vdma_tx_write_reg(fbdev, VDMA_REG_CR, cr);
+    vdma_write_reg(fbdev, VDMA_REG_MM2S_ADDR+VDMA_REG_VSIZE, fbdev->height);  /* Set VSIZE to start DMA */
+
+    /* Start parking to the initial frame 0 */
+
+    u32 parkPtr = vdma_read_reg(fbdev, VDMA_REG_PARKPTR);
+    parkPtr &= ~VDMA_PARKPTR_READREF_MASK;
+    vdma_write_reg(fbdev, VDMA_REG_PARKPTR, parkPtr);
+    cr = vdma_tx_read_reg(fbdev, VDMA_REG_CR) & ~VDMA_CR_TAIL_EN_MASK;
+    vdma_tx_write_reg(fbdev, VDMA_REG_CR, cr);
+
+    dev_info(&pdev->dev, "VDMA configured.\n");
+
+    /* register framebuffer */
+
+    rc = register_framebuffer(&fbdev->info);
+
+    if (rc) {
+        dev_err(&pdev->dev, "Could not register frame buffer\n");
+        RELEASE_AND_RETURN(1);
+    }
+
+    fbdev->flags |= VDMA_FB_FLAGS_REGISTERED;
+    dev_info(&pdev->dev, "VDMA Framebuffer Probed.\n");
+
+    return 0;
+}
+
+/**
+ * Remove this framebuffer driver
+ */
+
+static int vdma_fb_remove(struct platform_device *pdev) {
+    struct vdma_fb_device* fbdev = (struct vdma_fb_device*)platform_get_drvdata(pdev);
+
+    if (fbdev != NULL) {
+        vdma_fb_release(fbdev);
+    }
+    return 0;
+}
+
+static const struct of_device_id vdma_fb_of_ids[] = {
+    { .compatible = "r1cbu,vdmafb",},
+    {}
+};
+
+MODULE_DEVICE_TABLE(of, vdma_fb_of_ids);
+
+static struct platform_driver vdma_fb_driver = {
+    .driver = {
+        .name = "vdma-fb",
+        .of_match_table = vdma_fb_of_ids,
+    },
+    .probe = vdma_fb_probe,
+    .remove = vdma_fb_remove,
+};
+
+module_platform_driver(vdma_fb_driver);
+
+MODULE_AUTHOR("Kenta IDA <fuga@fugafuga.org>");
+MODULE_AUTHOR("Belousov Oleg <belousov.oleg@gmail.com>");
+MODULE_DESCRIPTION("VDMA Framebuffer Driver");
+MODULE_LICENSE("GPL");
